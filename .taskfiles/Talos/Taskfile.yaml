---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  apply-config:
    desc: Apply Talos config to a node [CLUSTER=main] [HOSTNAME=required] [MODE=auto|no-reboot|reboot]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmd: sops exec-file --input-type yaml --output-type yaml {{.CLUSTER_DIR}}/talos/{{.HOSTNAME}}.sops.yaml.j2 "minijinja-cli {}" | talosctl apply-config --mode={{.MODE}} --nodes {{.HOSTNAME}} --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/talos/{{.HOSTNAME}}.sops.yaml.j2
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster [CLUSTER=main] [VERSION=required]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - task: down
      - talosctl --nodes {{.CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
      - task: up
    vars:
      CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.CONTROLLER}} get machineconfig &>/dev/null
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/$KUBERNETES_VERSION

  upgrade-node:
    desc: Upgrade Talos on a single node [CLUSTER=main] [HOSTNAME=required] [VERSION=required]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - task: '{{if ne .ROLLOUT true}}down{{else}}noop{{end}}'
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer/{{.SCHEMATIC_ID}}:$TALOS_VERSION" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - task: '{{if ne .ROLLOUT true}}up{{else}}noop{{end}}'
    vars:
      SCHEMATIC_ID:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}'
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/$TALOS_VERSION

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster [CLUSTER=main] [VERSION=required]
    cmds:
      - task: down
      - for: { var: HOSTNAMES }
        task: upgrade-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          ROLLOUT: true
      - task: up
    vars:
      HOSTNAMES:
        sh: kubectl get nodes --output=jsonpath='{.items[*].metadata.name}'
    requires:
      vars: [CLUSTER]

  reset-node:
    desc: Reset Talos on a single node [CLUSTER=main] [HOSTNAME=required]
    prompt: Reset Talos node '{{.HOSTNAME}}' on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  reset-cluster:
    desc: Reset Talos across the whole cluster [CLUSTER=main]
    prompt: Reset Talos cluster '{{.CLUSTER}}' ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAMES}} --graceful=false
    vars:
      HOSTNAMES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.NODES}} get machineconfig &>/dev/null

  down:
    internal: true
    cmds:
      - until kubectl wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
      - flux --namespace flux-system suspend kustomization --all
      - task: :volsync:state-suspend

  up:
    internal: true
    cmds:
      - until kubectl wait cephcluster --for=jsonpath=.status.ceph.health=HEALTH_OK --timeout=10m --all --all-namespaces &>/dev/null; do sleep 5; done
      - flux --namespace flux-system resume kustomization --all
      - task: :volsync:state-resume

  # Ref: https://github.com/go-task/task/issues/608
  noop:
    internal: true
    silent: true
    cmd: noop() { :; }
